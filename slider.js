/**
 *  Angular-Slider
 *  Customized by James C.K. Hsiao.
 */

// Generated by CoffeeScript 1.7.1
(function() {
  var MODULE_NAME, SLIDER_TAG, angularize, gap, halfWidth, hide, inputEvents, module, offset, offsetLeft, pixelize, qualifiedDirectiveDefinition, roundStep, percentToOffset, percentValue, show, sliderDirective, width;

  MODULE_NAME = 'ui.slider';

  SLIDER_TAG = 'slider';

  angularize = function(element) {
    return angular.element(element);
  };

  pixelize = function(position) {
    return "" + position + "px";
  };

  hide = function(element) {
    return element.css({
      opacity: 0
    });
  };

  show = function(element) {
    return element.css({
      opacity: 1
    });
  };

  offset = function(element, position) {
    return element.css({
      left: position
    });
  };

  halfWidth = function(element) {
    return element[0].offsetWidth / 2;
  };

  offsetLeft = function(element) {
    return element[0].offsetLeft;
  };

  width = function(element) {
    return element[0].offsetWidth;
  };

  gap = function(element1, element2) {
    return offsetLeft(element2) - offsetLeft(element1) - width(element1);
  };

  roundStep = function(value, precision, step, floor) {
    var decimals, remainder, roundedValue, steppedValue;
    if (floor == null) {
      floor = 0;
    }
    if (step == null) {
      step = 1 / Math.pow(10, precision);
    }
    remainder = (value - floor) % step;
    steppedValue = remainder > (step / 2) ? value + step - remainder : value - remainder;
    decimals = Math.pow(10, precision);
    roundedValue = steppedValue * decimals / decimals;
    return roundedValue.toFixed(precision);
  };

  percentValue = function(value, minValue, valueRange) {
    return ((value - minValue) / valueRange) * 100;
  };
  percentToOffset = function(percent, offsetRange) {
    return pixelize(percent * offsetRange / 100);
  };

  inputEvents = {
    mouse: {
      start: 'mousedown',
      move: 'mousemove',
      end: 'mouseup'
    },
    touch: {
      start: 'touchstart',
      move: 'touchmove',
      end: 'touchend'
    }
  };

  sliderDirective = function($timeout, SCALE) {
    return {
      restrict: 'E',
      scope: {
        floor: '@',
        ceiling: '@',
        values: '=?',
        range: '@',
        step: '@',
        scalefn: '=',
        refresh: '=',
        showlimit: '=',
        showvalue: '=',
        highlight: '@',
        precision: '@',
        buffer: '@',
        dragstop: '@',
        ngModel: '=?',
        ngModelLow: '=?',
        ngModelHigh: '=?'
      },
      template: '<div class="bar"><div class="selection"></div></div>\n<div class="handle low"></div><div class="handle high"></div>\n<div class="bubble limit low" ng-if="showlimit">{{ values.length ? ( values[floor || 0] || floor ) : floor }}</div>\n<div class="bubble limit high" ng-if="showlimit">{{ values.length ? ( values[ceiling || values.length - 1] || ceiling ) : ceiling }}</div>\n<div class="bubble value low" ng-if="showvalue">{{ values.length ? ( values[local.ngModelLow || local.ngModel] || local.ngModelLow || local.ngModel ) : local.ngModelLow || local.ngModel}}</div>\n<div class="bubble value high" ng-if="showvalue">{{ values.length ? ( values[local.ngModelHigh] || local.ngModelHigh ) : local.ngModelHigh }}</div>'+
                '<ul class="scaleItems">'+
                  '<li class="item low"><div class="tick"></div><div class="tickname"><span class="inner-text" ng-bind-html="scalefn(floor, SCALELOW)"></span></div></li>'+
                  '<li class="item" ng-repeat="tick in scaleTickList"><div class="tick"></div><div class="tickname"><span class="inner-text" ng-bind-html="scalefn(tick)"></span></div></li>'+
                  '<li class="item high"><div class="tick"></div><div class="tickname"><span class="inner-text" ng-bind-html="scalefn(ceiling, SCALEHIGH)"></span></div></li>'+
                '</ul>',
      compile: function(element, attributes) {
        var bar, ceilBub, e, flrBub, high, highBub, low, lowBub, maxPtr, minPtr, range, selection, scaleTicks, watchables, _i, _len, _ref, _ref1;
        range = (attributes.ngModel == null) && (attributes.ngModelLow != null) && (attributes.ngModelHigh != null);
        _ref = (function() {
          var _i, _len, _ref, _results;
          _ref = element.children();
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            e = _ref[_i];
            _results.push(angularize(e));
          }
          return _results;
        })(), bar = _ref[0], minPtr = _ref[1], maxPtr = _ref[2], flrBub = _ref[3], ceilBub = _ref[4], lowBub = _ref[5], highBub = _ref[6], scaleTicks = _ref[7];
        selection = angularize(bar.children()[0]);
        if (!range) {
          _ref1 = [maxPtr, highBub];
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            element = _ref1[_i];
            element.remove();
          }
          if (!attributes.highlight) {
            selection.remove();
          }
        }
        low = range ? 'ngModelLow' : 'ngModel';
        high = 'ngModelHigh';
        watchables = ['floor', 'ceiling', 'values', low];
        if (range) {
          watchables.push(high);
        }
        return {
          post: function(scope, element, attributes) {
            var barWidth, boundToInputs, dimensions, handleHalfWidth, maxOffset, maxValue, minOffset, minValue, ngDocument, offsetRange, updateDOM, valueRange, w, _j, _len1, init, setScales, isInitialized;
            scope.local = {};
            scope.SCALELOW = SCALE.LOW;
            scope.SCALEHIGH = SCALE.HIGH;
            scope.local[low] = scope[low];
            scope.local[high] = scope[high];
            scope.refreshControl = scope.refresh || {};
            scope.refreshControl.refresh = updateDOM;
            boundToInputs = false;
            ngDocument = angularize(document);
            handleHalfWidth = barWidth = minOffset = maxOffset = minValue = maxValue = valueRange = offsetRange = void 0;
            dimensions = function() {
              var value, _j, _len1, _ref2;
              if (scope.step == null) {
                scope.step = 1;
              }
              if (scope.unit == null) {
                scope.unit = 1;
              }
              if (scope.floor == null) {
                scope.floor = 0;
              }
              if (scope.precision == null) {
                scope.precision = 0;
              }
              if (!range) {
                scope.ngModelLow = scope.ngModel;
              }
              if ((_ref2 = scope.values) != null ? _ref2.length : void 0) {
                if (scope.ceiling == null) {
                  scope.ceiling = scope.values.length - 1;
                }
              }
              scope.local[low] = scope[low] ? scope[low] : scope.floor;
              scope.local[high] = scope[high] ? scope[high] : scope.ceiling;
              for (_j = 0, _len1 = watchables.length; _j < _len1; _j++) {
                value = watchables[_j];
                if (typeof value === 'number') {
                  scope[value] = roundStep(parseFloat(scope[value]), parseInt(scope.precision), parseFloat(scope.step), parseFloat(scope.floor));
                }
              }
              handleHalfWidth = halfWidth(minPtr);
              barWidth = width(bar);
              minOffset = 0;
              maxOffset = barWidth; // - width(minPtr);
              minValue = parseFloat(scope.floor);
              maxValue = parseFloat(scope.ceiling);
              valueRange = maxValue - minValue;
              return offsetRange = maxOffset - minOffset;
            };
            init = function() {
              updateDOM();
              setScales();
            };
            setScales = function() {
              // Initialize the scales except the lowest and highest ones
              scope.scaleTickList = [];
              $timeout(function() {
                scope.$apply(function() {
                  for (var i = minValue+1; i < maxValue; i += parseFloat(scope.step)) {
                    scope.scaleTickList.push(i);
                  }
                });
                // Set the scales
                var scaleItems = scaleTicks.children();
                for (var i = 0; i < scaleItems.length; i++) {
                  var item = angularize(scaleItems[i]);
                  var valueWrap = item.children()[1];
                  var value = angularize(valueWrap).children()[0];
                  offset(item, percentToOffset(percentValue(minValue + i * parseFloat(scope.step), minValue, valueRange), offsetRange));
                  offset(angularize(value), pixelize((valueWrap.offsetWidth - value.offsetWidth) / 2) );
                }
                // Set default selection
                var lowIdx = scope.local[low] / scope.step;
                var highIdx = scope.local[high] / scope.step;
                angular.element(scaleItems[lowIdx]).addClass('chosen');
                angular.element(scaleItems[highIdx]).addClass('chosen');
              });
            };
            updateDOM = function() {
              var bindToInputEvents, fitToBar, percentOffset, setBindings, setPointers;
              dimensions();
              percentOffset = function(offset) {
                return ((offset - minOffset) / offsetRange) * 100;
              };
              fitToBar = function(element) {
                return offset(element, pixelize(Math.min(Math.max(0, offsetLeft(element)), barWidth - width(element))));
              };
              setPointers = function() {
                var newHighValue, newLowValue;
                offset(ceilBub, pixelize(barWidth - width(ceilBub)));
                newLowValue = percentValue(scope.local[low], minValue, valueRange);
                offset(minPtr, percentToOffset(newLowValue, offsetRange));
                offset(lowBub, pixelize(offsetLeft(minPtr) - (halfWidth(lowBub)) + handleHalfWidth));
                offset(selection, pixelize(offsetLeft(minPtr) + handleHalfWidth));
                switch (true) {
                  case range:
                    newHighValue = percentValue(scope.local[high], minValue, valueRange);
                    offset(maxPtr, percentToOffset(newHighValue, offsetRange));
                    offset(highBub, pixelize(offsetLeft(maxPtr) - (halfWidth(highBub)) + handleHalfWidth));
                    // Highlight chosen value
                    var scaleItems = scaleTicks.children();
                    var lowIdx = scope.local[low] / scope.step;
                    var highIdx = scope.local[high] / scope.step;
                    angular.forEach(scaleItems, function(item) {
                      angularize(item).removeClass('chosen');
                    });
                    angularize(scaleItems[lowIdx]).addClass('chosen');
                    angularize(scaleItems[highIdx]).addClass('chosen');
                    return selection.css({
                      width: percentToOffset(newHighValue - newLowValue, offsetRange)
                    });
                  case attributes.highlight === 'right':
                    return selection.css({
                      width: percentToOffset(110 - newLowValue, offsetRange)
                    });
                  case attributes.highlight === 'left':
                    selection.css({
                      width: percentToOffset(newLowValue, offsetRange)
                    });
                    return offset(selection, 0);
                }
              };
              bindToInputEvents = function(handle, bubble, ref, events) {
                var currentRef, onEnd, onMove, onStart;
                currentRef = ref;
                onEnd = function() {
                  bubble.removeClass('active');
                  handle.removeClass('active');
                  ngDocument.unbind(events.move);
                  ngDocument.unbind(events.end);
                  if (scope.dragstop) {
                    scope[high] = scope.local[high];
                    scope[low] = scope.local[low];
                  }
                  return currentRef = ref;
                };
                onMove = function(event) {
                  var eventX, newOffset, newPercent, newValue;
                  eventX = event.clientX || event.touches[0].clientX;
                  newOffset = eventX - element[0].getBoundingClientRect().left - handleHalfWidth;
                  newOffset = Math.max(Math.min(newOffset, maxOffset), minOffset);
                  newPercent = percentOffset(newOffset);
                  newValue = minValue + (valueRange * newPercent / 100.0);
                  if (range) {
                    switch (currentRef) {
                      case low:
                        if (newValue > scope.local[high]) {
                          currentRef = high;
                          minPtr.removeClass('active');
                          lowBub.removeClass('active');
                          maxPtr.addClass('active');
                          highBub.addClass('active');
                          setPointers();
                        } else if (scope.buffer > 0) {
                          newValue = Math.min(newValue, scope.local[high] - scope.buffer);
                        }
                        break;
                      case high:
                        if (newValue < scope.local[low]) {
                          currentRef = low;
                          maxPtr.removeClass('active');
                          highBub.removeClass('active');
                          minPtr.addClass('active');
                          lowBub.addClass('active');
                          setPointers();
                        } else if (scope.buffer > 0) {
                          newValue = Math.max(newValue, parseInt(scope.local[low]) + parseInt(scope.buffer));
                        }
                    }
                  }
                  newValue = roundStep(newValue, parseInt(scope.precision), parseFloat(scope.step), parseFloat(scope.floor));
                  scope.local[currentRef] = newValue;
                  if (!scope.dragstop) {
                    scope[currentRef] = newValue;
                  }
                  setPointers();
                  return scope.$apply();
                };
                onStart = function(event) {
                  dimensions();
                  bubble.addClass('active');
                  handle.addClass('active');
                  setPointers();
                  event.stopPropagation();
                  event.preventDefault();
                  ngDocument.bind(events.move, onMove);
                  return ngDocument.bind(events.end, onEnd);
                };
                return handle.bind(events.start, onStart);
              };
              setBindings = function() {
                var bind, inputMethod, _j, _len1, _ref2, _results;
                boundToInputs = true;
                bind = function(method) {
                  bindToInputEvents(minPtr, lowBub, low, inputEvents[method]);
                  return bindToInputEvents(maxPtr, highBub, high, inputEvents[method]);
                };
                _ref2 = ['touch', 'mouse'];
                _results = [];
                for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
                  inputMethod = _ref2[_j];
                  _results.push(bind(inputMethod));
                }
                return _results;
              };
              if (!boundToInputs) {
                setBindings();
              }
              return setPointers();
            };
            //$timeout(init);
            init();
            for (_j = 0, _len1 = watchables.length; _j < _len1; _j++) {
              w = watchables[_j];
              scope.$watch(w, updateDOM, true);
            }
            return window.addEventListener("resize", updateDOM);
          }
        };
      }
    };
  };

  qualifiedDirectiveDefinition = ['$timeout', 'SCALE', sliderDirective];

  module = function(window, angular) {
    return angular.module(MODULE_NAME, []).directive(SLIDER_TAG, qualifiedDirectiveDefinition).constant('SCALE', { LOW: 1, HIGH: 2 });
  };

  module(window, window.angular);

}).call(this);
